buildscript {
    ext {
        querydslVersion = "4.1.4"
    }
    repositories {
        maven {
            url("http://nexus.intr/repository/mavengroup/")
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 5, "minutes"
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
    }
}

plugins {
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "com.ewerk.gradle.plugins.querydsl"
apply plugin: "maven-publish"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "io.spring.dependency-management"

version = "0.0.1-SNAPSHOT"

jar {
    baseName = "personmgr"
    version = version
}

springBoot {
    buildInfo()
}

description = """personmgr"""

repositories {
    maven {
        url("http://nexus.intr/repository/mavengroup/")
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "hystrix-core"
    compile.exclude module: "feign-hystrix"
}

dependencies {
    compile("ru.majordomo.hms.rc.user:resources:[1.5.26, 1.6)")
    compile("ru.majordomo.hms.rc.staff:resources:[2.0.10, 2.1)")

    compile("dnsjava:dnsjava:2.1.8")

    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-configuration-processor")

    compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    compile("org.springframework.cloud:spring-cloud-starter-openfeign")
    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-stream")
    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    compile('org.springframework.boot:spring-boot-starter-data-redis')

    compile("org.apache.xmlrpc:xmlrpc-client:3.1.3")
    compile("org.apache.httpcomponents:httpmime:4.5.6")
    compile("commons-io:commons-io:2.6")

    compile("commons-validator:commons-validator:1.6")
    compile("com.google.guava:guava:27.0-jre")
    
    compile("com.mysql:management:1.1.6") {
        exclude(module: "jmxtools")
    }

    compile("ru.majordomo.hms.common:hms-common:0.0.1-SNAPSHOT")

    compile("org.hibernate:hibernate-validator:6.0.13.Final")
    compile("org.hibernate:hibernate-validator-cdi:6.0.13.Final")
    compile("javax.el:javax.el-api:3.0.0")
    compile("org.glassfish.web:javax.el:2.2.4")

    compile "com.querydsl:querydsl-mongodb:$querydslVersion"
    compile "com.querydsl:querydsl-apt:$querydslVersion"
    
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude(module: "commons-logging")
    }
    testCompile('de.bwaldvogel:mongo-java-server:1.19.0')
    compile("com.cronutils:cron-utils:5.0.1")

    compile("com.googlecode.libphonenumber:libphonenumber:8.10.2")

    compile("net.javacrumbs.shedlock:shedlock-spring:0.10.0")
    compile("net.javacrumbs.shedlock:shedlock-provider-mongo:0.8.0")

    compile("org.jongo:jongo:1.4.0")

    compile("org.projectlombok:lombok:1.18.4")
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springVersion}"
    }
}

def generatedSrcDir = "src/main/generated"

querydsl {
    springDataMongo = true
    querydslSourcesDir = file(generatedSrcDir)
    library = "com.querydsl:querydsl-mongodb:$querydslVersion"
}

idea {
    module {
        sourceDirs += file(generatedSrcDir)
        generatedSourceDirs += file(generatedSrcDir)
    }
}

def versionPropsFile = file("version.properties")
def versionBuild

if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    versionBuild = versionProps["VERSION_BUILD"].toInteger()
} else {
    throw new GradleException("Could not read version.properties!")
}

ext.autoIncrementBuildNumber = {
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps["VERSION_BUILD"].toInteger() + 1
        versionProps["VERSION_BUILD"] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "ru.majordomo.hms.personmgr"
            artifactId "exceptions"
            version "1.0." + versionBuild
            artifact exceptionJar
        }
    }
    repositories {
        maven {
            url uri(mavenUrl)
            credentials {
                username = mavenUser
                password = mavenPass
            }
        }
    }
}

publish.doFirst autoIncrementBuildNumber

task exceptionJar(type: Jar, dependsOn: compileJava) {
    baseName = "exceptions"
    from sourceSets.main.output.classesDir
    include "ru/majordomo/hms/personmgr/exception/**"
}
