buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
        querydslVersion = '4.1.4'
    }
    repositories {
        maven {
            url('http://nexus.intr/repository/mj/')
        }
    }
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 30, 'minutes'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        classpath "com.avast.gradle:docker-compose-gradle-plugin:0.3.9"
        classpath("ru.majordomo:copycompose:1.+")
    }
}
plugins {
    id 'org.ajoberstar.grgit' version '1.5.1'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.7"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'docker-compose'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'ru.majordomo.copycompose'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

group = 'hms'

jar {
    baseName = 'personmgr'
    version = '0.0.1-SNAPSHOT'
}


description = """personmgr"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url('http://nexus.intr/repository/mj/')
    }
    maven {
        url('http://nexus.intr/repository/maven-public/')
    }
    maven { url "http://maven.intr" }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "hystrix-core"
    compile.exclude module: "feign-hystrix"
}

dependencies {
    compile('ru.majordomo.hms.rc.user:resources:1+')
    compile('ru.majordomo.hms.rc.staff:resources:1+')

    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-amqp')
//    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-web-services')
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-jetty")

    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-feign')
    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp")
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-stream")
    compile('org.springframework.cloud:spring-cloud-starter-config')
//    compile('org.springframework.cloud:spring-cloud-starter-oauth2')

//    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version:'2.0.11.RELEASE'
//    compile group: 'org.springframework.security', name: 'spring-security-jwt', version:'1.0.5.RELEASE'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6")

    compile("commons-validator:commons-validator:1.5.1")
    
    compile(group: 'com.mysql', name: 'management', version: '1.1.6') {
        exclude(module: 'jmxtools')
    }

    compile group: 'ru.majordomo.hms.common', name: 'hms-common', version: '0.0.1-SNAPSHOT'

    compile('org.hibernate:hibernate-validator:5.3.3.Final')
    compile('org.hibernate:hibernate-validator-cdi:5.3.3.Final')
    compile('javax.el:javax.el-api:2.2.4')
    compile('org.glassfish.web:javax.el:2.2.4')

    compile "com.querydsl:querydsl-mongodb:$querydslVersion"
    compile "com.querydsl:querydsl-apt:$querydslVersion"
    
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile('com.github.fakemongo:fongo:2.0.9')
    compile("com.cronutils:cron-utils:5.0.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR1"
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    def dockerDir = "docker"
    def entryPoint = entryPoint_nondebug
    def git = org.ajoberstar.grgit.Grgit.open(file('.'))
    tagVersion = git.branch.getCurrent().getName().replaceAll("refs/heads/", "")
    if (tagVersion == "HEAD") {
        // в gitlab-runner после пулла branch.getCurrent() указывает всегда на HEAD в любой ветке
        tagVersion = project.projectBranch
    }
    if (project.hasProperty('debug')) {
        if (project.debug == "yes") {
            entryPoint = entryPoint_debug
        }
    }
    push = true
    project.group = "docker-registry.intr/" + project.group
    applicationName = jar.baseName
    dockerfile = file("${buildDir}/Dockerfile")
    doFirst {
        copy {
            from "${dockerDir}/Dockerfile"
            into buildDir
            expand(jarBuildName: jar.getArchiveName(), projectName: project.name, entryPoint: entryPoint)
        }
        copy {
            from jar
            into stageDir
        }
    }
}

task cloneCompose(type: Exec) {
    doFirst {
        delete 'docker-compose'
    }
    commandLine 'git', 'clone', 'git@gitlab.intr:hms/docker-compose.git'
}

task composePull(type: Exec) {
    commandLine 'docker-compose', 'pull'
}

task delCompose(type: Delete) {
    delete 'docker-compose'
}

cookCompose.dependsOn("cloneCompose")
composePull.dependsOn("cookCompose")
composeUp.dependsOn("composePull")
composeUp.finalizedBy delCompose

composeDown {
    doLast { delete 'docker-compose.yml' }
}

def generatedSrcDir = 'src/main/generated'

querydsl {
    springDataMongo = true
    querydslSourcesDir = file(generatedSrcDir)
    library = "com.querydsl:querydsl-mongodb:$querydslVersion"
}

idea {
    module {
        sourceDirs += file(generatedSrcDir)
        generatedSourceDirs += file(generatedSrcDir)
    }
}